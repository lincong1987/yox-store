{"version":3,"file":"yox-store.min.js","sources":["../src/index.js"],"sourcesContent":["\nlet Yox\n\nexport class Store {\n\n  constructor() {\n    this.$store = new Yox()\n  }\n\n  /**\n   * 从本地存储读取，需自行实现\n   *\n   * @param {string} key 数据的 key\n   * @param {Function} callback\n   */\n  read(key, callback) {\n\n  }\n\n  /**\n   * 把数据写到本地存储\n   *\n   * @param {string} key\n   * @return {string|number|boolean} value 可以是字符串、数字、布尔，但从本地存储读取出来的都是字符串\n   */\n  write(key, value) {\n\n  }\n\n  /**\n   * 内存中的取值\n   *\n   * @param {string} key\n   * @param {?boolean} readFromStorage 如果内存没有取到值，是否从本地存储尝试取值\n   * @param {?Function} callback 如果 readFromStorage 为 true，则必须传入回调函数\n   */\n  get(key, readFromStorage, callback) {\n    let instance = this\n    let value = instance.$store.get(key)\n    if (readFromStorage) {\n      return value === undefined\n        ? instance.read(\n            key,\n            function (value) {\n              instance.set(key, value)\n              callback(value)\n            }\n          )\n        : Yox.nextTick(\n            function () {\n              callback(value)\n            }\n          )\n    }\n    return value\n  }\n\n  /**\n   * 内存中的设值\n   *\n   * @param {string} key\n   * @param {string|number|boolean} value\n   * @param {?boolean} writeToStorage 是否写到本地存储中\n   */\n  set(key, value, writeToStorage) {\n    this.$store.set(key, value)\n    if (writeToStorage) {\n      this.write(key, value)\n    }\n  }\n\n  prepend(key, data) {\n    this.$store.prepend(key, data)\n  }\n\n  append(key, data) {\n    this.$store.append(key, data)\n  }\n\n  /**\n   * 通过索引移除数组中的元素\n   *\n   * @param {string} keypath\n   * @param {number} index\n   * @return {?boolean} 是否移除成功\n   */\n  removeAt(keypath, index) {\n    return this.$store.removeAt(keypath, index)\n  }\n\n  /**\n   * 直接移除数组中的元素\n   *\n   * @param {string} keypath\n   * @param {*} item\n   * @return {?boolean} 是否移除成功\n   */\n  remove(keypath, item) {\n    return this.$store.remove(keypath, item)\n  }\n\n  increase(key, step, max) {\n    this.$store.increase(key, step, max)\n  }\n\n  decrease(key, step, min) {\n    this.$store.decrease(key, step, min)\n  }\n\n  /**\n   * 更新对象类型的数据\n   *\n   * @param {string} key\n   * @param {Object} value\n   */\n  extend(key, value) {\n    if (Yox.is.object(value)) {\n      let oldValue = this.get(key)\n      if (Yox.is.object(oldValue)) {\n        value = Yox.object.extend(\n          Yox.object.extend({}, oldValue),\n          value\n        )\n      }\n      this.set(key, value)\n    }\n  }\n\n  /**\n   * 尝试设值\n   *\n   * @param {string} key\n   * @param {string|number|boolean} value\n   * @return {Function} 返回异步回调，传入是否失败\n   */\n  setting(key, value) {\n\n    let instance = this\n    let oldValue = instance.get(key)\n    instance.set(key, value)\n\n    return function (error) {\n      if (error) {\n        instance.set(key, oldValue)\n      }\n    }\n\n  }\n\n  increasing(key, step, max) {\n\n    let instance = this\n    let oldValue = instance.get(key)\n    instance.increase(key, step, max)\n\n    return function (error) {\n      if (error) {\n        instance.set(key, oldValue)\n      }\n    }\n\n  }\n\n  decreasing(key, step, min) {\n\n    let instance = this\n    let oldValue = instance.get(key)\n    instance.decrease(key, step, min)\n\n    return function (error) {\n      if (error) {\n        instance.set(key, oldValue)\n      }\n    }\n\n  }\n\n  /**\n   * 数据监听\n   *\n   * @param {string} key\n   * @param {Function} watcher\n   * @param {boolean} immediate\n   */\n  watch(key, watcher, immediate) {\n    this.$store.watch(key, watcher, immediate)\n  }\n\n  /**\n   * 取消数据监听\n   *\n   * @param {string} key\n   * @param {Function} watcher\n   */\n  unwatch(key, watcher) {\n    this.$store.unwatch(key, watcher)\n  }\n\n  nextTick(fn) {\n    this.$store.nextTick(fn)\n  }\n\n}\n\n/**\n * 版本\n */\nexport const version = process.env.NODE_VERSION\n\n/**\n * 安装插件\n */\nexport function install(Class) {\n  Yox = Class\n}\n"],"names":["let","Yox","Store","this","$store","read","key","callback","write","value","get","readFromStorage","instance","undefined","set","nextTick","writeToStorage","prepend","data","append","removeAt","keypath","index","remove","item","increase","step","max","decrease","min","extend","is","object","oldValue","setting","error","increasing","decreasing","watch","watcher","immediate","unwatch","fn","Class"],"mappings":"qMACAA,IAAIC,EAESC,EAEX,WACEC,KAAKC,OAAS,IAAIH,GAStBC,YAAEG,cAAKC,EAAKC,KAUZL,YAAEM,eAAMF,EAAKG,KAWbP,YAAEQ,aAAIJ,EAAKK,EAAiBJ,GACxBP,IAAIY,EAAWT,KACXM,EAAQG,EAASR,OAAOM,IAAIJ,GAClC,OAAMK,OACeE,IAAVJ,EACHG,EAASP,KACPC,EACF,SAAYG,GACRG,EAASE,IAAIR,EAAKG,GACpBF,EAAWE,KAGbR,EAAIc,SACF,WACAR,EAAWE,KAIZA,GAUXP,YAAEY,aAAIR,EAAKG,EAAOO,GAChBb,KAAOC,OAAOU,IAAIR,EAAKG,GACjBO,GACFb,KAAKK,MAAMF,EAAKG,IAItBP,YAAEe,iBAAQX,EAAKY,GACbf,KAAOC,OAAOa,QAAQX,EAAKY,IAG7BhB,YAAEiB,gBAAOb,EAAKY,GACZf,KAAOC,OAAOe,OAAOb,EAAKY,IAU5BhB,YAAEkB,kBAASC,EAASC,GAClB,OAASnB,KAAKC,OAAOgB,SAASC,EAASC,IAUzCpB,YAAEqB,gBAAOF,EAASG,GAChB,OAASrB,KAAKC,OAAOmB,OAAOF,EAASG,IAGvCtB,YAAEuB,kBAASnB,EAAKoB,EAAMC,GACpBxB,KAAOC,OAAOqB,SAASnB,EAAKoB,EAAMC,IAGpCzB,YAAE0B,kBAAStB,EAAKoB,EAAMG,GACpB1B,KAAOC,OAAOwB,SAAStB,EAAKoB,EAAMG,IASpC3B,YAAE4B,gBAAOxB,EAAKG,GACZ,GAAMR,EAAI8B,GAAGC,OAAOvB,GAAQ,CAC1B,IAAMwB,EAAW9B,KAAKO,IAAIJ,GACpBL,EAAI8B,GAAGC,OAAOC,KAChBxB,EAAQR,EAAI+B,OAAOF,OACnB7B,EAAM+B,OAAOF,OAAO,GAAIG,GACtBxB,IAGJN,KAAKW,IAAIR,EAAKG,KAWpBP,YAAEgC,iBAAQ5B,EAAKG,GAEXT,IAAIY,EAAWT,KACX8B,EAAWrB,EAASF,IAAIJ,GAG9B,OAFEM,EAASE,IAAIR,EAAKG,GAEX,SAAU0B,GACXA,GACFvB,EAASE,IAAIR,EAAK2B,KAM1B/B,YAAEkC,oBAAW9B,EAAKoB,EAAMC,GAEpB3B,IAAIY,EAAWT,KACX8B,EAAWrB,EAASF,IAAIJ,GAG9B,OAFAM,EAAWa,SAASnB,EAAKoB,EAAMC,GAEtB,SAAUQ,GACXA,GACFvB,EAASE,IAAIR,EAAK2B,KAM1B/B,YAAEmC,oBAAW/B,EAAKoB,EAAMG,GAEpB7B,IAAIY,EAAWT,KACX8B,EAAWrB,EAASF,IAAIJ,GAG9B,OAFAM,EAAWgB,SAAStB,EAAKoB,EAAMG,GAEtB,SAAUM,GACXA,GACFvB,EAASE,IAAIR,EAAK2B,KAa1B/B,YAAEoC,eAAMhC,EAAKiC,EAASC,GACpBrC,KAAOC,OAAOkC,MAAMhC,EAAKiC,EAASC,IASpCtC,YAAEuC,iBAAQnC,EAAKiC,GACbpC,KAAOC,OAAOqC,QAAQnC,EAAKiC,IAG7BrC,YAAEa,kBAAS2B,GACPvC,KAAKC,OAAOW,SAAS2B,wBAalB,SAAiBC,GACtB1C,EAAM0C,aANe"}